{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravi\\\\Desktop\\\\loginform\\\\loginform\\\\2\\\\delivery-boy-app\\\\src\\\\components\\\\DeliveryBoyPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport \"./DeliveryBoyPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeliveryBoyPage = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [deliveryMarker, setDeliveryMarker] = useState(null);\n  const [trackingInterval, setTrackingInterval] = useState(null);\n  const [status, setStatus] = useState(\"Fetching location...\");\n  const [eta, setEta] = useState(\"Calculating...\");\n  const backendUrl = \"http://localhost:4000\"; // Replace with your backend URL\n  const deliverySpeedKmh = 50; // Set delivery speed for ETA calculation\n\n  // Fetch orders for the delivery boy\n  const fetchOrders = async () => {\n    try {\n      const response = await axios.get(`${backendUrl}/api/order/list`);\n      if (response.data.success) {\n        setOrders(response.data.data);\n      } else {\n        console.error(\"Failed to fetch orders:\", response.data);\n      }\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n    }\n  };\n\n  // Decode polyline from OpenRouteService\n  const decodePolyline = polyline => {\n    let index = 0,\n      lat = 0,\n      lng = 0,\n      coordinates = [],\n      shift = 0,\n      result = 0,\n      byte = null;\n    while (index < polyline.length) {\n      shift = 0;\n      result = 0;\n      do {\n        byte = polyline.charCodeAt(index++) - 63;\n        result |= (byte & 0x1f) << shift;\n        shift += 5;\n      } while (byte >= 0x20);\n      const deltaLat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lat += deltaLat;\n      shift = 0;\n      result = 0;\n      do {\n        byte = polyline.charCodeAt(index++) - 63;\n        result |= (byte & 0x1f) << shift;\n        shift += 5;\n      } while (byte >= 0x20);\n      const deltaLng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\n      lng += deltaLng;\n      coordinates.push([lng / 1e5, lat / 1e5]);\n    }\n    return coordinates;\n  };\n\n  // Update the delivery boy's location and route\n  const updateLocation = async order => {\n    if (!navigator.geolocation) {\n      setStatus(\"Geolocation is not supported by this browser.\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      try {\n        await axios.post(`${backendUrl}/api/delivery/update-location`, {\n          lat: latitude,\n          lon: longitude,\n          orderId: order._id\n        });\n        setStatus(`Location updated for Order ID: ${order._id}`);\n\n        // Update the delivery marker on the map\n        if (deliveryMarker) {\n          deliveryMarker.setLngLat([longitude, latitude]);\n        } else {\n          const marker = new maplibregl.Marker({\n            color: \"blue\"\n          }).setLngLat([longitude, latitude]).setPopup(new maplibregl.Popup().setText(\"Your Location\")).addTo(mapInstance);\n          setDeliveryMarker(marker);\n        }\n\n        // Fetch and update the route\n        const directionsResponse = await axios.post(\"https://api.openrouteservice.org/v2/directions/driving-car\", {\n          coordinates: [[longitude, latitude], [order.address.lon, order.address.lat]]\n        }, {\n          headers: {\n            Authorization: \"5b3ce3597851110001cf62483b6381d6acf243b8b65187942c94f362\",\n            \"Content-Type\": \"application/json\"\n          }\n        });\n        const routeGeometry = directionsResponse.data.routes[0].geometry;\n        const decodedRoute = decodePolyline(routeGeometry);\n        if (!mapInstance.getSource(\"route\")) {\n          mapInstance.addSource(\"route\", {\n            type: \"geojson\",\n            data: {\n              type: \"Feature\",\n              geometry: {\n                type: \"LineString\",\n                coordinates: decodedRoute\n              }\n            }\n          });\n          mapInstance.addLayer({\n            id: \"route-layer\",\n            type: \"line\",\n            source: \"route\",\n            layout: {\n              \"line-join\": \"round\",\n              \"line-cap\": \"round\"\n            },\n            paint: {\n              \"line-color\": \"#ff0000\",\n              \"line-width\": 4\n            }\n          });\n        } else {\n          mapInstance.getSource(\"route\").setData({\n            type: \"Feature\",\n            geometry: {\n              type: \"LineString\",\n              coordinates: decodedRoute\n            }\n          });\n        }\n\n        // Calculate and update ETA\n        const distanceKm = directionsResponse.data.routes[0].summary.distance / 1000; // Convert to km\n        setEta(`${Math.max(1, Math.round(distanceKm / deliverySpeedKmh))} hr`);\n      } catch (error) {\n        console.error(\"Error updating route:\", error);\n      }\n    }, error => {\n      console.error(\"Error fetching location:\", error);\n      setStatus(\"Failed to fetch location.\");\n    });\n  };\n\n  // Initialize the map\n  const initializeMap = order => {\n    const mapContainer = document.getElementById(\"map\");\n    if (mapInstance) {\n      mapInstance.remove(); // Remove previous map instance\n      setMapInstance(null);\n    }\n    const map = new maplibregl.Map({\n      container: mapContainer,\n      style: \"https://api.maptiler.com/maps/streets/style.json?key=EjBcSB0AjZylSCnAuoxl\",\n      center: [order.address.lon, order.address.lat],\n      zoom: 12\n    });\n    new maplibregl.Marker({\n      color: \"red\"\n    }).setLngLat([order.address.lon, order.address.lat]).setPopup(new maplibregl.Popup().setText(\"Delivery Destination\")).addTo(map);\n    setMapInstance(map);\n    document.getElementById(\"map-section\").scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n\n  // Handle order selection\n  const handleSelectOrder = order => {\n    setSelectedOrder(order);\n    initializeMap(order);\n    updateLocation(order); // Immediate location update\n  };\n  useEffect(() => {\n    fetchOrders();\n\n    // Update location every 15 seconds for the selected order\n    const interval = setInterval(() => {\n      if (selectedOrder) {\n        updateLocation(selectedOrder);\n      }\n    }, 15000);\n    return () => clearInterval(interval); // Cleanup interval\n  }, [selectedOrder]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Delivery Boy Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: orders.length > 0 ? orders.map(order => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [\"Order ID: \", order._id, \" - \", order.address.street, \", \", order.address.city, /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectOrder(order),\n          children: \"Select Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this)]\n      }, order._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No orders available.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this), selectedOrder && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Live Location for Order ID: \", selectedOrder._id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        style: {\n          width: \"100%\",\n          height: \"500px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Estimated Time to Deliver: \", eta]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 5\n  }, this);\n};\n_s(DeliveryBoyPage, \"/waKpUm4ASaCdvarTuUyG7iuajE=\");\n_c = DeliveryBoyPage;\nexport default DeliveryBoyPage;\nvar _c;\n$RefreshReg$(_c, \"DeliveryBoyPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","maplibregl","jsxDEV","_jsxDEV","DeliveryBoyPage","_s","orders","setOrders","selectedOrder","setSelectedOrder","mapInstance","setMapInstance","deliveryMarker","setDeliveryMarker","trackingInterval","setTrackingInterval","status","setStatus","eta","setEta","backendUrl","deliverySpeedKmh","fetchOrders","response","get","data","success","console","error","decodePolyline","polyline","index","lat","lng","coordinates","shift","result","byte","length","charCodeAt","deltaLat","deltaLng","push","updateLocation","order","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","post","lon","orderId","_id","setLngLat","marker","Marker","color","setPopup","Popup","setText","addTo","directionsResponse","address","headers","Authorization","routeGeometry","routes","geometry","decodedRoute","getSource","addSource","type","addLayer","id","source","layout","paint","setData","distanceKm","summary","distance","Math","max","round","initializeMap","mapContainer","document","getElementById","remove","map","Map","container","style","center","zoom","scrollIntoView","behavior","handleSelectOrder","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","street","city","onClick","width","height","_c","$RefreshReg$"],"sources":["C:/Users/ravi/Desktop/loginform/loginform/2/delivery-boy-app/src/components/DeliveryBoyPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport maplibregl from \"maplibre-gl\";\r\nimport \"maplibre-gl/dist/maplibre-gl.css\";\r\nimport \"./DeliveryBoyPage.css\";\r\n\r\nconst DeliveryBoyPage = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [mapInstance, setMapInstance] = useState(null);\r\n  const [deliveryMarker, setDeliveryMarker] = useState(null);\r\n  const [trackingInterval, setTrackingInterval] = useState(null);\r\n  const [status, setStatus] = useState(\"Fetching location...\");\r\n  const [eta, setEta] = useState(\"Calculating...\");\r\n  const backendUrl = \"http://localhost:4000\"; // Replace with your backend URL\r\n  const deliverySpeedKmh = 50; // Set delivery speed for ETA calculation\r\n\r\n  // Fetch orders for the delivery boy\r\n  const fetchOrders = async () => {\r\n    try {\r\n      const response = await axios.get(`${backendUrl}/api/order/list`);\r\n      if (response.data.success) {\r\n        setOrders(response.data.data);\r\n      } else {\r\n        console.error(\"Failed to fetch orders:\", response.data);\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching orders:\", error);\r\n    }\r\n  };\r\n\r\n  // Decode polyline from OpenRouteService\r\n  const decodePolyline = (polyline) => {\r\n    let index = 0,\r\n      lat = 0,\r\n      lng = 0,\r\n      coordinates = [],\r\n      shift = 0,\r\n      result = 0,\r\n      byte = null;\r\n\r\n    while (index < polyline.length) {\r\n      shift = 0;\r\n      result = 0;\r\n      do {\r\n        byte = polyline.charCodeAt(index++) - 63;\r\n        result |= (byte & 0x1f) << shift;\r\n        shift += 5;\r\n      } while (byte >= 0x20);\r\n      const deltaLat = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\r\n      lat += deltaLat;\r\n\r\n      shift = 0;\r\n      result = 0;\r\n      do {\r\n        byte = polyline.charCodeAt(index++) - 63;\r\n        result |= (byte & 0x1f) << shift;\r\n        shift += 5;\r\n      } while (byte >= 0x20);\r\n      const deltaLng = (result & 1) !== 0 ? ~(result >> 1) : result >> 1;\r\n      lng += deltaLng;\r\n\r\n      coordinates.push([lng / 1e5, lat / 1e5]);\r\n    }\r\n    return coordinates;\r\n  };\r\n\r\n  // Update the delivery boy's location and route\r\n  const updateLocation = async (order) => {\r\n    if (!navigator.geolocation) {\r\n      setStatus(\"Geolocation is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n\r\n        try {\r\n          await axios.post(`${backendUrl}/api/delivery/update-location`, {\r\n            lat: latitude,\r\n            lon: longitude,\r\n            orderId: order._id,\r\n          });\r\n\r\n          setStatus(`Location updated for Order ID: ${order._id}`);\r\n\r\n          // Update the delivery marker on the map\r\n          if (deliveryMarker) {\r\n            deliveryMarker.setLngLat([longitude, latitude]);\r\n          } else {\r\n            const marker = new maplibregl.Marker({ color: \"blue\" })\r\n              .setLngLat([longitude, latitude])\r\n              .setPopup(new maplibregl.Popup().setText(\"Your Location\"))\r\n              .addTo(mapInstance);\r\n            setDeliveryMarker(marker);\r\n          }\r\n\r\n          // Fetch and update the route\r\n          const directionsResponse = await axios.post(\r\n            \"https://api.openrouteservice.org/v2/directions/driving-car\",\r\n            {\r\n              coordinates: [\r\n                [longitude, latitude],\r\n                [order.address.lon, order.address.lat],\r\n              ],\r\n            },\r\n            {\r\n              headers: {\r\n                Authorization: \"5b3ce3597851110001cf62483b6381d6acf243b8b65187942c94f362\",\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n            }\r\n          );\r\n\r\n          const routeGeometry = directionsResponse.data.routes[0].geometry;\r\n          const decodedRoute = decodePolyline(routeGeometry);\r\n\r\n          if (!mapInstance.getSource(\"route\")) {\r\n            mapInstance.addSource(\"route\", {\r\n              type: \"geojson\",\r\n              data: {\r\n                type: \"Feature\",\r\n                geometry: {\r\n                  type: \"LineString\",\r\n                  coordinates: decodedRoute,\r\n                },\r\n              },\r\n            });\r\n\r\n            mapInstance.addLayer({\r\n              id: \"route-layer\",\r\n              type: \"line\",\r\n              source: \"route\",\r\n              layout: {\r\n                \"line-join\": \"round\",\r\n                \"line-cap\": \"round\",\r\n              },\r\n              paint: {\r\n                \"line-color\": \"#ff0000\",\r\n                \"line-width\": 4,\r\n              },\r\n            });\r\n          } else {\r\n            mapInstance.getSource(\"route\").setData({\r\n              type: \"Feature\",\r\n              geometry: {\r\n                type: \"LineString\",\r\n                coordinates: decodedRoute,\r\n              },\r\n            });\r\n          }\r\n\r\n          // Calculate and update ETA\r\n          const distanceKm =\r\n            directionsResponse.data.routes[0].summary.distance / 1000; // Convert to km\r\n          setEta(`${Math.max(1, Math.round(distanceKm / deliverySpeedKmh))} hr`);\r\n        } catch (error) {\r\n          console.error(\"Error updating route:\", error);\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error(\"Error fetching location:\", error);\r\n        setStatus(\"Failed to fetch location.\");\r\n      }\r\n    );\r\n  };\r\n\r\n  // Initialize the map\r\n  const initializeMap = (order) => {\r\n    const mapContainer = document.getElementById(\"map\");\r\n\r\n    if (mapInstance) {\r\n      mapInstance.remove(); // Remove previous map instance\r\n      setMapInstance(null);\r\n    }\r\n\r\n    const map = new maplibregl.Map({\r\n      container: mapContainer,\r\n      style: \"https://api.maptiler.com/maps/streets/style.json?key=EjBcSB0AjZylSCnAuoxl\",\r\n      center: [order.address.lon, order.address.lat],\r\n      zoom: 12,\r\n    });\r\n\r\n    new maplibregl.Marker({ color: \"red\" })\r\n      .setLngLat([order.address.lon, order.address.lat])\r\n      .setPopup(new maplibregl.Popup().setText(\"Delivery Destination\"))\r\n      .addTo(map);\r\n\r\n    setMapInstance(map);\r\n    document.getElementById(\"map-section\").scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  // Handle order selection\r\n  const handleSelectOrder = (order) => {\r\n    setSelectedOrder(order);\r\n    initializeMap(order);\r\n    updateLocation(order); // Immediate location update\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOrders();\r\n\r\n    // Update location every 15 seconds for the selected order\r\n    const interval = setInterval(() => {\r\n      if (selectedOrder) {\r\n        updateLocation(selectedOrder);\r\n      }\r\n    }, 15000);\r\n\r\n    return () => clearInterval(interval); // Cleanup interval\r\n  }, [selectedOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <h2>Delivery Boy Dashboard</h2>\r\n      <p>Status: {status}</p>\r\n      <h3>Orders</h3>\r\n      <ul>\r\n        {orders.length > 0 ? (\r\n          orders.map((order) => (\r\n            <li key={order._id}>\r\n              Order ID: {order._id} - {order.address.street}, {order.address.city}\r\n              <button onClick={() => handleSelectOrder(order)}>Select Order</button>\r\n            </li>\r\n          ))\r\n        ) : (\r\n          <p>No orders available.</p>\r\n        )}\r\n      </ul>\r\n      {selectedOrder && (\r\n        <div id=\"map-section\">\r\n          <h3>Live Location for Order ID: {selectedOrder._id}</h3>\r\n          <div id=\"map\" style={{ width: \"100%\", height: \"500px\" }}></div>\r\n          <p>Estimated Time to Deliver: {eta}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeliveryBoyPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}