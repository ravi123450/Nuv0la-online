{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ravi\\\\Desktop\\\\loginform\\\\loginform\\\\2\\\\delivery-boy-app\\\\src\\\\components\\\\DeliveryBoyPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport maplibregl from \"maplibre-gl\";\nimport \"maplibre-gl/dist/maplibre-gl.css\";\nimport \"./DeliveryBoyPage.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DeliveryBoyPage = () => {\n  _s();\n  const [orders, setOrders] = useState([]);\n  const [selectedOrder, setSelectedOrder] = useState(null);\n  const [mapInstance, setMapInstance] = useState(null);\n  const [deliveryMarker, setDeliveryMarker] = useState(null);\n  const [status, setStatus] = useState(\"Fetching location...\");\n  const [trackingInterval, setTrackingInterval] = useState(null);\n\n  // Fetch orders from the backend\n  const fetchOrders = async () => {\n    try {\n      const response = await axios.get(\"http://localhost:4000/api/order/list\");\n      setOrders(response.data.data); // Adjust according to your backend response structure\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n    }\n  };\n\n  // Update the delivery boy's live location\n  const updateLocation = async () => {\n    if (!navigator.geolocation) {\n      setStatus(\"Geolocation is not supported by this browser.\");\n      return;\n    }\n    navigator.geolocation.getCurrentPosition(async position => {\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n      setStatus(\"Location updated!\");\n      if (selectedOrder) {\n        try {\n          await axios.post(\"http://localhost:4000/api/delivery/update-location\", {\n            lat: latitude,\n            lon: longitude,\n            orderId: selectedOrder._id\n          });\n\n          // Update marker position on the map\n          if (deliveryMarker) {\n            deliveryMarker.setLngLat([longitude, latitude]);\n          }\n        } catch (error) {\n          console.error(\"Error updating location:\", error);\n          setStatus(\"Failed to update location.\");\n        }\n      }\n    }, error => {\n      console.error(\"Error fetching location:\", error);\n      setStatus(\"Failed to fetch location.\");\n    });\n  };\n\n  // Initialize the map\n  const initializeMap = order => {\n    const mapContainer = document.getElementById(\"map\");\n    if (!mapContainer) {\n      console.error(\"Map container not found!\");\n      return;\n    }\n\n    // Remove the existing map instance if it exists\n    if (mapInstance) {\n      mapInstance.remove();\n    }\n    const map = new maplibregl.Map({\n      container: mapContainer,\n      style: \"https://api.maptiler.com/maps/streets/style.json?key=EjBcSB0AjZylSCnAuoxl\",\n      center: [order.address.lon, order.address.lat],\n      zoom: 12\n    });\n    new maplibregl.Marker({\n      color: \"red\"\n    }).setLngLat([order.address.lon, order.address.lat]).setPopup(new maplibregl.Popup().setText(\"Delivery Destination\")).addTo(map);\n    setMapInstance(map);\n\n    // Add a marker for the delivery boy's current location\n    const marker = new maplibregl.Marker({\n      color: \"blue\"\n    }).setLngLat([order.address.lon, order.address.lat]) // Initial position\n    .addTo(map);\n    setDeliveryMarker(marker);\n\n    // Scroll to the map section\n    const mapSection = document.getElementById(\"map-section\");\n    if (mapSection) {\n      mapSection.scrollIntoView({\n        behavior: \"smooth\"\n      });\n    } else {\n      console.error(\"Map section not found!\");\n    }\n  };\n\n  // Handle order selection\n  const handleSelectOrder = order => {\n    setSelectedOrder(order);\n    initializeMap(order);\n\n    // Clear existing tracking interval\n    if (trackingInterval) {\n      clearInterval(trackingInterval);\n    }\n\n    // Start updating location every 15 seconds\n    const interval = setInterval(updateLocation, 15000);\n    setTrackingInterval(interval);\n  };\n  useEffect(() => {\n    fetchOrders();\n    return () => {\n      // Cleanup on component unmount\n      if (trackingInterval) {\n        clearInterval(trackingInterval);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"delivery-boy-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Delivery Boy Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Status: \", status]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Orders\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"orders-list\",\n      children: orders.map(order => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"order-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Order ID:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 15\n          }, this), \" \", order._id, \" -\", \" \", `${order.address.street}, ${order.address.city}`]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleSelectOrder(order),\n          children: \"Select Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, order._id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), selectedOrder && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"map-section\",\n      className: \"map-section\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Live Tracking for Order ID: \", selectedOrder._id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"map\",\n        className: \"map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(DeliveryBoyPage, \"PltkQ0SLTd5oyGKl2hCIGBkz7wc=\");\n_c = DeliveryBoyPage;\nexport default DeliveryBoyPage;\nvar _c;\n$RefreshReg$(_c, \"DeliveryBoyPage\");","map":{"version":3,"names":["React","useState","useEffect","axios","maplibregl","jsxDEV","_jsxDEV","DeliveryBoyPage","_s","orders","setOrders","selectedOrder","setSelectedOrder","mapInstance","setMapInstance","deliveryMarker","setDeliveryMarker","status","setStatus","trackingInterval","setTrackingInterval","fetchOrders","response","get","data","error","console","updateLocation","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","post","lat","lon","orderId","_id","setLngLat","initializeMap","order","mapContainer","document","getElementById","remove","map","Map","container","style","center","address","zoom","Marker","color","setPopup","Popup","setText","addTo","marker","mapSection","scrollIntoView","behavior","handleSelectOrder","clearInterval","interval","setInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","street","city","onClick","id","_c","$RefreshReg$"],"sources":["C:/Users/ravi/Desktop/loginform/loginform/2/delivery-boy-app/src/components/DeliveryBoyPage.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport maplibregl from \"maplibre-gl\";\r\nimport \"maplibre-gl/dist/maplibre-gl.css\";\r\nimport \"./DeliveryBoyPage.css\";\r\n\r\nconst DeliveryBoyPage = () => {\r\n  const [orders, setOrders] = useState([]);\r\n  const [selectedOrder, setSelectedOrder] = useState(null);\r\n  const [mapInstance, setMapInstance] = useState(null);\r\n  const [deliveryMarker, setDeliveryMarker] = useState(null);\r\n  const [status, setStatus] = useState(\"Fetching location...\");\r\n  const [trackingInterval, setTrackingInterval] = useState(null);\r\n\r\n  // Fetch orders from the backend\r\n  const fetchOrders = async () => {\r\n    try {\r\n      const response = await axios.get(\"http://localhost:4000/api/order/list\");\r\n      setOrders(response.data.data); // Adjust according to your backend response structure\r\n    } catch (error) {\r\n      console.error(\"Error fetching orders:\", error);\r\n    }\r\n  };\r\n\r\n  // Update the delivery boy's live location\r\n  const updateLocation = async () => {\r\n    if (!navigator.geolocation) {\r\n      setStatus(\"Geolocation is not supported by this browser.\");\r\n      return;\r\n    }\r\n\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        const { latitude, longitude } = position.coords;\r\n\r\n        setStatus(\"Location updated!\");\r\n\r\n        if (selectedOrder) {\r\n          try {\r\n            await axios.post(\"http://localhost:4000/api/delivery/update-location\", {\r\n              lat: latitude,\r\n              lon: longitude,\r\n              orderId: selectedOrder._id,\r\n            });\r\n\r\n            // Update marker position on the map\r\n            if (deliveryMarker) {\r\n              deliveryMarker.setLngLat([longitude, latitude]);\r\n            }\r\n          } catch (error) {\r\n            console.error(\"Error updating location:\", error);\r\n            setStatus(\"Failed to update location.\");\r\n          }\r\n        }\r\n      },\r\n      (error) => {\r\n        console.error(\"Error fetching location:\", error);\r\n        setStatus(\"Failed to fetch location.\");\r\n      }\r\n    );\r\n  };\r\n\r\n  // Initialize the map\r\n  const initializeMap = (order) => {\r\n    const mapContainer = document.getElementById(\"map\");\r\n\r\n    if (!mapContainer) {\r\n      console.error(\"Map container not found!\");\r\n      return;\r\n    }\r\n\r\n    // Remove the existing map instance if it exists\r\n    if (mapInstance) {\r\n      mapInstance.remove();\r\n    }\r\n\r\n    const map = new maplibregl.Map({\r\n      container: mapContainer,\r\n      style: \"https://api.maptiler.com/maps/streets/style.json?key=EjBcSB0AjZylSCnAuoxl\",\r\n      center: [order.address.lon, order.address.lat],\r\n      zoom: 12,\r\n    });\r\n\r\n    new maplibregl.Marker({ color: \"red\" })\r\n      .setLngLat([order.address.lon, order.address.lat])\r\n      .setPopup(new maplibregl.Popup().setText(\"Delivery Destination\"))\r\n      .addTo(map);\r\n\r\n    setMapInstance(map);\r\n\r\n    // Add a marker for the delivery boy's current location\r\n    const marker = new maplibregl.Marker({ color: \"blue\" })\r\n      .setLngLat([order.address.lon, order.address.lat]) // Initial position\r\n      .addTo(map);\r\n\r\n    setDeliveryMarker(marker);\r\n\r\n    // Scroll to the map section\r\n    const mapSection = document.getElementById(\"map-section\");\r\n    if (mapSection) {\r\n      mapSection.scrollIntoView({ behavior: \"smooth\" });\r\n    } else {\r\n      console.error(\"Map section not found!\");\r\n    }\r\n  };\r\n\r\n  // Handle order selection\r\n  const handleSelectOrder = (order) => {\r\n    setSelectedOrder(order);\r\n    initializeMap(order);\r\n\r\n    // Clear existing tracking interval\r\n    if (trackingInterval) {\r\n      clearInterval(trackingInterval);\r\n    }\r\n\r\n    // Start updating location every 15 seconds\r\n    const interval = setInterval(updateLocation, 15000);\r\n    setTrackingInterval(interval);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchOrders();\r\n\r\n    return () => {\r\n      // Cleanup on component unmount\r\n      if (trackingInterval) {\r\n        clearInterval(trackingInterval);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"delivery-boy-page\">\r\n      <h2>Delivery Boy Dashboard</h2>\r\n      <p>Status: {status}</p>\r\n      <h3>Orders</h3>\r\n      <ul className=\"orders-list\">\r\n        {orders.map((order) => (\r\n          <li key={order._id} className=\"order-item\">\r\n            <span>\r\n              <strong>Order ID:</strong> {order._id} -{\" \"}\r\n              {`${order.address.street}, ${order.address.city}`}\r\n            </span>\r\n            <button onClick={() => handleSelectOrder(order)}>Select Order</button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n\r\n      {selectedOrder && (\r\n        <div id=\"map-section\" className=\"map-section\">\r\n          <h3>Live Tracking for Order ID: {selectedOrder._id}</h3>\r\n          <div id=\"map\" className=\"map\"></div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DeliveryBoyPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}